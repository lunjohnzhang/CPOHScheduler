//
//  DayScheduleViewStyleKit.swift
//  DayScheduleView
//
//  Created by Naked Software, LLC on 8/16/18.
//  Copyright Â© 2018 Naked Software, LLC. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class DayScheduleViewStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let backgroundColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var backgroundColor: UIColor { return Cache.backgroundColor }

    //// Drawing Methods

    @objc dynamic public class func drawTimeView(frame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 2085)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Background Drawing
        let backgroundPath = UIBezierPath(rect: CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height))
        UIColor.white.setFill()
        backgroundPath.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: frame.minX, y: frame.minY, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), time: "12 AM")
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: frame.minX, y: frame.minY + 86, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol2Rect.width, height: symbol2Rect.height), time: "1 AM")
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: frame.minX, y: frame.minY + 172, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol3Rect.width, height: symbol3Rect.height), time: "2 AM")
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: frame.minX, y: frame.minY + 258, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol4Rect.width, height: symbol4Rect.height), time: "3 AM")
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: frame.minX, y: frame.minY + 344, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol5Rect.width, height: symbol5Rect.height), time: "4 AM")
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: frame.minX, y: frame.minY + 430, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol6Rect.width, height: symbol6Rect.height), time: "5 AM")
        context.restoreGState()


        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: frame.minX, y: frame.minY + 516, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol7Rect.width, height: symbol7Rect.height), time: "6 AM")
        context.restoreGState()


        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: frame.minX, y: frame.minY + 602, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol8Rect.width, height: symbol8Rect.height), time: "7 AM")
        context.restoreGState()


        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: frame.minX, y: frame.minY + 688, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol9Rect.width, height: symbol9Rect.height), time: "8 AM")
        context.restoreGState()


        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: frame.minX, y: frame.minY + 774, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol10Rect.width, height: symbol10Rect.height), time: "9 AM")
        context.restoreGState()


        //// Symbol 11 Drawing
        let symbol11Rect = CGRect(x: frame.minX, y: frame.minY + 860, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol11Rect.width, height: symbol11Rect.height), time: "10 AM")
        context.restoreGState()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: frame.minX, y: frame.minY + 946, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol12Rect.width, height: symbol12Rect.height), time: "11 AM")
        context.restoreGState()


        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: frame.minX, y: frame.minY + 1032, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol13Rect.width, height: symbol13Rect.height), time: "Noon")
        context.restoreGState()


        //// Symbol 14 Drawing
        let symbol14Rect = CGRect(x: frame.minX, y: frame.minY + 1118, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol14Rect)
        context.translateBy(x: symbol14Rect.minX, y: symbol14Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol14Rect.width, height: symbol14Rect.height), time: "1 PM")
        context.restoreGState()


        //// Symbol 15 Drawing
        let symbol15Rect = CGRect(x: frame.minX, y: frame.minY + 1204, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol15Rect)
        context.translateBy(x: symbol15Rect.minX, y: symbol15Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol15Rect.width, height: symbol15Rect.height), time: "2 PM")
        context.restoreGState()


        //// Symbol 16 Drawing
        let symbol16Rect = CGRect(x: frame.minX, y: frame.minY + 1290, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol16Rect)
        context.translateBy(x: symbol16Rect.minX, y: symbol16Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol16Rect.width, height: symbol16Rect.height), time: "3 PM")
        context.restoreGState()


        //// Symbol 17 Drawing
        let symbol17Rect = CGRect(x: frame.minX, y: frame.minY + 1376, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol17Rect)
        context.translateBy(x: symbol17Rect.minX, y: symbol17Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol17Rect.width, height: symbol17Rect.height), time: "4 PM")
        context.restoreGState()


        //// Symbol 18 Drawing
        let symbol18Rect = CGRect(x: frame.minX, y: frame.minY + 1462, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol18Rect)
        context.translateBy(x: symbol18Rect.minX, y: symbol18Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol18Rect.width, height: symbol18Rect.height), time: "5 PM")
        context.restoreGState()


        //// Symbol 19 Drawing
        let symbol19Rect = CGRect(x: frame.minX, y: frame.minY + 1548, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol19Rect)
        context.translateBy(x: symbol19Rect.minX, y: symbol19Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol19Rect.width, height: symbol19Rect.height), time: "6 PM")
        context.restoreGState()


        //// Symbol 20 Drawing
        let symbol20Rect = CGRect(x: frame.minX, y: frame.minY + 1634, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol20Rect)
        context.translateBy(x: symbol20Rect.minX, y: symbol20Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol20Rect.width, height: symbol20Rect.height), time: "7 PM")
        context.restoreGState()


        //// Symbol 21 Drawing
        let symbol21Rect = CGRect(x: frame.minX, y: frame.minY + 1720, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol21Rect)
        context.translateBy(x: symbol21Rect.minX, y: symbol21Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol21Rect.width, height: symbol21Rect.height), time: "8 PM")
        context.restoreGState()


        //// Symbol 22 Drawing
        let symbol22Rect = CGRect(x: frame.minX, y: frame.minY + 1806, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol22Rect)
        context.translateBy(x: symbol22Rect.minX, y: symbol22Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol22Rect.width, height: symbol22Rect.height), time: "9 PM")
        context.restoreGState()


        //// Symbol 23 Drawing
        let symbol23Rect = CGRect(x: frame.minX, y: frame.minY + 1892, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol23Rect)
        context.translateBy(x: symbol23Rect.minX, y: symbol23Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol23Rect.width, height: symbol23Rect.height), time: "10 PM")
        context.restoreGState()


        //// Symbol 24 Drawing
        let symbol24Rect = CGRect(x: frame.minX, y: frame.minY + 1978, width: 384, height: 86)
        context.saveGState()
        context.clip(to: symbol24Rect)
        context.translateBy(x: symbol24Rect.minX, y: symbol24Rect.minY)

        DayScheduleViewStyleKit.drawHour(frame: CGRect(x: 0, y: 0, width: symbol24Rect.width, height: symbol24Rect.height), time: "11 PM")
        context.restoreGState()


        //// Symbol 25 Drawing
        let symbol25Rect = CGRect(x: frame.minX, y: frame.minY + 2064, width: 384, height: 21)
        context.saveGState()
        context.clip(to: symbol25Rect)
        context.translateBy(x: symbol25Rect.minX, y: symbol25Rect.minY)

        DayScheduleViewStyleKit.drawHourLine(frame: CGRect(x: 0, y: 0, width: symbol25Rect.width, height: symbol25Rect.height), time: "12 AM")
        context.restoreGState()
    }

    @objc dynamic public class func drawHourLine(frame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 21), time: String = "12 AM") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let lineColor = UIColor(red: 0.667, green: 0.667, blue: 0.667, alpha: 1.000)

        //// Text Drawing
        let textRect = CGRect(x: frame.minX, y: frame.minY, width: 50, height: 21)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .right
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: lineColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = time.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        time.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + 58, y: frame.minY + 10, width: frame.width - 58, height: 1))
        lineColor.setFill()
        rectanglePath.fill()
    }

    @objc dynamic public class func drawHour(frame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 86), time: String = "12 AM") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let lineColor = UIColor(red: 0.667, green: 0.667, blue: 0.667, alpha: 1.000)

        //// Symbol Drawing
        let symbolRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: 21)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        DayScheduleViewStyleKit.drawHourLine(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), time: time)
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + 58, y: frame.minY + 53, width: frame.width - 58, height: 1))
        lineColor.setFill()
        rectanglePath.fill()
    }

    @objc dynamic public class func drawCurrentTime(frame: CGRect = CGRect(x: 0, y: 0, width: 384, height: 21), now: String = "10:20 AM") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let currentTimeColor = UIColor(red: 0.991, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Text Drawing
        let textRect = CGRect(x: frame.minX, y: frame.minY, width: 50, height: 21)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .right
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 10),
            .foregroundColor: currentTimeColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = now.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        now.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + 52, y: frame.minY + 10, width: frame.width - 52, height: 1))
        currentTimeColor.setFill()
        rectanglePath.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 60, y: frame.minY + 8, width: 5, height: 5))
        currentTimeColor.setFill()
        ovalPath.fill()
    }

}
